"N_2 (N0 = 4, r  = 0.2, nt = 30)"),
pch=c(1, 17))}
#library(tidyverse)
#data = data.frame(t=1:length(N_1), N1 = N_1, N2 = N_2)
#ggplot(data, aes(x=t, y=select(data, "N1", "N2")))
#? Wie gro? muss die Anfangspopulation sein, damit bei halbsogro?em Wachstum
#? nach 30 Zeitschritten etwa die gleiche Population wie bei N_1 besteht?
for (n_Null in 1:100) {
N_T = exp_Wachtum(N0 = n_Null, r  = 0.1, nt = 30)
points(exp_Wachtum(N0 = n_Null, r  = 0.1, nt = 30), type="l")
if ((N_1[30]-1)<=N_T[30] & N_T[30]<=(N_1[30]+1)) {
print(n_Null)
break
}
}
points(exp_Wachtum(N0 = 25, r  = 0.1, nt = 30), type="l", lwd=5, col="red")
abline(v=30)
abline(h=N_1[30])
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
((((((1+0.1439* 4180)* (315.95-293.150))/(0.17612* (322.25-293.150))* 10)^2+((80+4180)(315.95-293.150))/(0.17612(322.25-315.95))* 0.000058)^2+((80+0.1439* 4180)* (1-293.150))/(0.17612(322.25-1))* 0.029)^2+(((80+0.1439* 4180)* (315.95-1))/(0.17612(322.25-315.95))* 0.029)^2+(((80+0.1439* 4180)* (315.95-293.150))/(322.25-315.95)* 0.000029)^2+(((80+0.1439* 4180)* (315.95-293.150))/(0.17612(1-315.95))* 0.029)^2)**0.5
((((((1+0.1439*4180)*(315.95-293.150))/(0.17612*(322.25-293.150))*10)**2+((80+4180)(315.95-293.150))/(0.17612(322.25-315.95))*0.000058)**2+((80+0.1439*4180)*(1-293.150))/(0.17612(322.25-1))*0.029)^2+(((80+0.1439* 4180)*(315.95-1))/(0.17612(322.25-315.95))*0.029)**2+(((80+0.1439* 4180)*(315.95-293.150))/(322.25-315.95)*0.000029)**2+(((80+0.1439*4180)*(315.95-293.150))/(0.17612(1-315.95))*0.029)**2)**0.5
```{r}
( (((1+0.1439*4180)*(315.95-293.150))/(0.17612*(322.25-293.150))*10)**2+(((80+4180)(315.95-293.150))/(0.17612(322.25-315.95))*0.000058)**2+(((80+0.1439*4180)*(1-293.150))/(0.17612(322.25-1))*0.029)^2+(((80+0.1439* 4180)*(315.95-1))/(0.17612(322.25-315.95))*0.029)**2+(((80+0.1439*4180)*(315.95-293.150))/(322.25-315.95)*0.000029)**2+(((80+0.1439*4180)*(315.95-293.150))/(0.17612(1-315.95))*0.029)**2)**0.5
( (((1+0.1439*4180)*(315.95-293.150))/(0.17612*(322.25-293.150))*10)**2+(((80+4180)(315.95-293.150))/(0.17612(322.25-315.95))*0.000058)**2)
( (((1+0.1439*4180)*(315.95-293.150))/(0.17612*(322.25-293.150))*10)**2)
( (((1+0.1439*4180)*(315.95-293.150))/(0.17612*(322.25-293.150))*10)**2
+(((80+4180)(315.95-293.150))/(0.17612(322.25-315.95))*0.000058)**2)
( (((1+0.1439*4180)*(315.95-293.150))/(0.17612*(322.25-293.150))*10)**2+(((80+4180)*(315.95-293.150))/(0.17612*(322.25-315.95))*0.000058)**2)
( (((1+0.1439*4180)*(315.95-293.150))/(0.17612*(322.25-293.150))*10)**2+(((80+4180)*(315.95-293.150))/(0.17612*(322.25-315.95))*0.000058)**2)+(((80+0.1439*4180)*(1-293.150))/(0.17612(322.25-1))*0.029)^2+(((80+0.1439* 4180)*(315.95-1))/(0.17612(322.25-315.95))*0.029)**2
( (((1+0.1439*4180)*(315.95-293.150))/(0.17612*(322.25-293.150))*10)**2
+(((80+4180)*(315.95-293.150))/(0.17612*(322.25-315.95))*0.000058)**2
+(((80+0.1439*4180)*(1-293.150))/(0.17612(322.25-1))*0.029)**2)
( (((1+0.1439*4180)*(315.95-293.150))/(0.17612*(322.25-293.150))*10)**2
+(((80+4180)*(315.95-293.150))/(0.17612*(322.25-315.95))*0.000058)**2
+(((80+0.1439*4180)*(1-293.150))/(0.17612*(322.25-1))*0.029)**2)
( (((1+0.1439*4180)*(315.95-293.150))/(0.17612*(322.25-293.150))*10)**2
+(((80+4180)*(315.95-293.150))/(0.17612*(322.25-315.95))*0.000058)**2
+(((80+0.1439*4180)*(1-293.150))/(0.17612*(322.25-1))*0.029)**2
+(((80+0.1439* 4180)*(315.95-1))/(0.17612*(322.25-315.95))*0.029)**2)
( (((1+0.1439*4180)*(315.95-293.150))/(0.17612*(322.25-293.150))*10)**2
+(((80+4180)*(315.95-293.150))/(0.17612*(322.25-315.95))*0.000058)**2
+(((80+0.1439*4180)*(1-293.150))/(0.17612*(322.25-1))*0.029)**2
+(((80+0.1439* 4180)*(315.95-1))/(0.17612*(322.25-315.95))*0.029)**2
+(((80+0.1439* 4180)*(315.95-293.150))/(322.25-315.95)*0.000029)**2)
( (((1+0.1439*4180)*(315.95-293.150))/(0.17612*(322.25-293.150))*10)**2
+(((80+4180)*(315.95-293.150))/(0.17612*(322.25-315.95))*0.000058)**2
+(((80+0.1439*4180)*(1-293.150))/(0.17612*(322.25-1))*0.029)**2
+(((80+0.1439* 4180)*(315.95-1))/(0.17612*(322.25-315.95))*0.029)**2
+(((80+0.1439* 4180)*(315.95-293.150))/(322.25-315.95)*0.000029)**2
+(((80+0.1439*4180)*(315.95-293.150))/(0.17612(1-315.95))*0.029)**2)**0.5
+(((80+0.1439*4180)*(315.95-293.150))/(0.17612*(1-315.95))*0.029)**2)**0.5
( (((1+0.1439*4180)*(315.95-293.150))/(0.17612*(322.25-293.150))*10)**2
+(((80+4180)*(315.95-293.150))/(0.17612*(322.25-315.95))*0.000058)**2
+(((80+0.1439*4180)*(1-293.150))/(0.17612*(322.25-1))*0.029)**2
+(((80+0.1439* 4180)*(315.95-1))/(0.17612*(322.25-315.95))*0.029)**2
+(((80+0.1439* 4180)*(315.95-293.150))/(322.25-315.95)*0.000029)**2)
+(((80+0.1439*4180)*(315.95-293.150))/(0.17612*(1-315.95))*0.029)**2)**0.5
((((1+0.1439*4180)*(315.95-293.150))/(0.17612*(322.25-293.150))*10)**2
+(((80+4180)*(315.95-293.150))/(0.17612*(322.25-315.95))*0.000058)**2
+(((80+0.1439*4180)*(1-293.150))/(0.17612*(322.25-1))*0.029)**2
+(((80+0.1439* 4180)*(315.95-1))/(0.17612*(322.25-315.95))*0.029)**2
+(((80+0.1439* 4180)*(315.95-293.150))/(322.25-315.95)*0.000029)**2
+(((80+0.1439*4180)*(315.95-293.150))/(0.17612*(1-315.95))*0.029)**2)**0.5
# Messgrößen
groesse = c("Becherglas mit Wasser [g]", "Masse Becherglas [g]", "Wassermasse [g]", "Metallmasse [g]", "Metallvolumen [ml]", "Anfangstemperatur [°C]", "Mischtemperatur [°C]", "Raumtemperatur [K]")
messwerte <- data.frame(Messwert = c(235.5, 97.4, 235.5-97.4, 198.0, 23.00, 273.15+50.000, 273.15+44.2, 273.15+20),
Geräteart = c("digital", "digital", "-", "digital", "analog", "digital", "digital", "digital"),
Skaleneinheit = c(0.1, 0.1, "-", 0.1, 1, 0.1, 0.1, 0.1),
Unsicherheit = c(0.029, 0.029, 2*0.029, 0.029, 0.20, 0.029, 0.029, 0.029)
)
rownames(messwerte) <- groesse
knitr::kable(messwerte, caption = "Aufgenommene Messwerte samt Unsicherheiten für das untersuchte orangene Metall")
((((1+0.13810*4180)*(317.35-293.150))/(0.19800*(323.15-293.150))*10)**2
+(((80+4180)*(317.35-293.150))/(0.19800*(323.15-317.35))*0.000058)**2
+(((80+0.13810*4180)*(1-293.150))/(0.19800*(323.15-1))*0.029)**2
+(((80+0.13810* 4180)*(317.35-1))/(0.19800*(323.15-317.35))*0.029)**2
+(((80+0.13810* 4180)*(317.35-293.150))/(323.15-317.35)*0.000029)**2
+(((80+0.13810*4180)*(317.35-293.150))/(0.19800*(1-317.35))*0.029)**2)**0.5
# Ausgabe als Plot
{plot(x=zeitreiheErhitzung$Zeit_s, y=zeitreiheErhitzung$Temperatur,
# Aesthetics
ylab = "Temperatur T in °C",
xlab = "Zeit t in s",
main= "Temperaturverlauf im Kaloriemeter",
pch=20, las=1)
# Einzeichnen der Regressionsgeraden
abline(coef=c(b, a))
# Einzeichen der Regressiosgeraden ab-/zuzüglich des Fehlers
abline(coef=c(b, a-R))
abline(coef=c(b, a+R))
# Legendenerzeugung
legend(x=270, y=(0.98*max(zeitreiheErhitzung$Temperatur)),
legend=c("Messwerte", paste("Lineare Regression:",
"\ny=ax+b",
"\na = ", round(a,5),
"\nb = ", round(b,3),
"\nR^2 = ", round(R, 5))),
col="black", pch = c(20, 26), lty=c(0,1),
bty = "n")
}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# Einlesen der csv-Datei
zeitreiheErhitzung <- read.csv("Daten/Messreihe.csv", sep = ";", dec=",")
# Tidy-up
zeitreiheErhitzung <- zeitreiheErhitzung[2:nrow(zeitreiheErhitzung), 10:11]
colnames(zeitreiheErhitzung) <- c("Zeit_s", "Temperatur")
# Lineare Regression
lm <- lm(zeitreiheErhitzung$Temperatur~zeitreiheErhitzung$Zeit_s)
# Steigung a extrahieren
a <- lm$coefficient[2]
# Y-Achsenabschnitt b extrahieren
b <- lm$coefficient[1]
# Standardfehler R^2 extrahieren
lmsummary <- summary(lm)
R <- lmsummary$coefficients[2,2]
# Ausgabe als Plot
{plot(x=zeitreiheErhitzung$Zeit_s, y=zeitreiheErhitzung$Temperatur,
# Aesthetics
ylab = "Temperatur T in °C",
xlab = "Zeit t in s",
main= "Temperaturverlauf im Kaloriemeter",
pch=20, las=1)
# Einzeichnen der Regressionsgeraden
abline(coef=c(b, a))
# Einzeichen der Regressiosgeraden ab-/zuzüglich des Fehlers
abline(coef=c(b, a-R))
abline(coef=c(b, a+R))
# Legendenerzeugung
legend(x=270, y=(0.98*max(zeitreiheErhitzung$Temperatur)),
legend=c("Messwerte", paste("Lineare Regression:",
"\ny=ax+b",
"\na = ", round(a,5),
"\nb = ", round(b,3),
"\nR^2 = ", round(R, 5))),
col="black", pch = c(20, 26), lty=c(0,1),
bty = "n")
}
# Lineare Regression
lm <- lm(zeitreiheErhitzung$Temperatur~zeitreiheErhitzung$Zeit_s)
summary(lm)
# Berechnung in R
(5.7*2.2)/(0.01641)-4180*0.1637
# Berechnung in R
sqrt((2.20/0.01641*0.0029)**2+(5.70/0.01641*0.0029)**2+
(5.70*2.20/0.01641**2*0.00022)**2+(4180*29*10**(-6))**2)
# Messgrößen
groesse = c("C Kaloriemeter [J/K]", "Becherglas mit Wasser [g]", "Masse Becherglas [g]", "Wassermasse [g]", "Metallmasse [g]", "Metallvolumen [ml]", "Anfangstemperatur [°C]", "Mischtemperatur [°C]", "Raumtemperatur [K]")
messwerte <- data.frame(Messwert = c(80, 235.5, 97.4, 235.5-97.4, 198.0, 23.00, 273.15+50.000, 273.15+44.2, 273.15+20),
Formelzeichen = c("C_K", "-", "-", "m_w", "m_F", "V_F", "T_A", "T_M", "T_B"),
Geräteart = c("-", "digital", "digital", "-", "digital", "analog", "digital", "digital", "digital"),
Skaleneinheit = c("-", 0.1, 0.1, "-", 0.1, 1, 0.1, 0.1, 0.1),
Unsicherheit = c(10, 0.029, 0.029, 2*0.029, 0.029, 0.20, 0.029, 0.029, 0.029)
)
rownames(messwerte) <- groesse
knitr::kable(messwerte, caption = "Aufgenommene Messwerte samt Unsicherheiten für das untersuchte orangene Metall")
# Messgrößen
groesse = c("C Kaloriemeter [J/K]", "Becherglas mit Wasser [g]", "Masse Becherglas [g]", "Wassermasse [g]", "Metallmasse [g]", "Metallvolumen [ml]", "Anfangstemperatur []", "Mischtemperatur [K]", "Raumtemperatur [K]")
messwerte <- data.frame(Messwert = c(80, 241.3, 97.4, 241.3-97.4, 176.12,22.00, 273.150+49.100, 273.150+42.8, 273.15+20.0),
Formelzeichen = c("C_K", "-", "-", "m_w", "m_F", "V_F", "T_A", "T_M", "T_B"),
Geräteart = c("-", "digital", "digital", "-", "digital", "analog", "digital", "digital", "digital"),
Skaleneinheit = c("-", 0.1, 0.1, "-", 0.1, 1, 0.1, 0.1, 0.1),
Unsicherheit = c(10, 0.029, 0.029, 2*0.029, 0.029, 0.20, 0.029, 0.029, 0.029)
)
rownames(messwerte) <- groesse
knitr::kable(messwerte, caption = "Aufgenommene Messwerte samt Unsicherheiten für das untersuchte graue Metall")
# Berechnung in R
((((1+0.13810*4180)*(317.35-293.150))/(0.19800*(323.15-293.150))*10)**2
+(((80+4180)*(317.35-293.150))/(0.19800*(323.15-317.35))*0.000058)**2
+(((80+0.13810*4180)*(1-293.150))/(0.19800*(323.15-1))*0.029)**2
+(((80+0.13810* 4180)*(317.35-1))/(0.19800*(323.15-317.35))*0.029)**2
+(((80+0.13810* 4180)*(317.35-293.150))/(323.15-317.35)*0.000029)**2
+(((80+0.13810*4180)*(317.35-293.150))/(0.19800*(1-317.35))*0.029)**2)**0.5
# Berechnung in R
((((1+0.1439*4180)*(315.95-293.150))/(0.17612*(322.25-293.150))*10)**2
+(((80+4180)*(315.95-293.150))/(0.17612*(322.25-315.95))*0.000058)**2
+(((80+0.1439*4180)*(1-293.150))/(0.17612*(322.25-1))*0.029)**2
+(((80+0.1439* 4180)*(315.95-1))/(0.17612*(322.25-315.95))*0.029)**2
+(((80+0.1439* 4180)*(315.95-293.150))/(322.25-315.95)*0.000029)**2
+(((80+0.1439*4180)*(315.95-293.150))/(0.17612*(1-315.95))*0.029)**2)**0.5
sqrt( ( ( (1+m_w*c_w)*(T_M-T_B) )/(m_F*(T_A-T_B))*u_CK)**2
+( ((C_K+c_w)*(T_M-T_B))/(m_F(T_A-T_M))*u_mw)**2
+( ((C_K+m_w*c_w)*(1-T_B))/(m_F*(T_A-1))*u_TM)**2
+( ((C_K+m_w*c_w)*(T_M-1))/(m_F(T_A-T_M))*u_TB)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(T_A-T_M)*u_mf)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(m_F*(1-T_M))*u_TA)**2)
C_K = 80 #J/kg
u_CK = 10 #J/kg
m_w = 0.13810 #kg
u_mw = 0.000058 #kg
m_F = 0.19800 #kg
u_mF = 0.000029 #kg
T_A = 323.15 #K
u_TA = 0.029 #K
T_B = 293.15 #K
u_TA = 0.029 #K
T_M = 317.35 #K
u_TA = 0.029 #K
c_w = 4180 #J
sqrt( ( ((1+m_w*c_w)*(T_M-T_B))/(m_F*(T_A-T_B))*u_CK)**2
+( ((C_K+c_w)*(T_M-T_B))/(m_F(T_A-T_M))*u_mw)**2
+( ((C_K+m_w*c_w)*(1-T_B))/(m_F*(T_A-1))*u_TM)**2
+( ((C_K+m_w*c_w)*(T_M-1))/(m_F(T_A-T_M))*u_TB)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(T_A-T_M)*u_mF)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(m_F*(1-T_M))*u_TA)**2)
sqrt( ( ((1+m_w*c_w)*(T_M-T_B))/(m_F*(T_A-T_B))*u_CK)**2
+( ((C_K+c_w)*(T_M-T_B))/(m_F*(T_A-T_M))*u_mw)**2
+( ((C_K+m_w*c_w)*(1-T_B))/(m_F*(T_A-1))*u_TM)**2
+( ((C_K+m_w*c_w)*(T_M-1))/(m_F*(T_A-T_M))*u_TB)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(T_A-T_M)*u_mF)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(m_F*(1-T_M))*u_TA)**2)
C_K = 80 #J/kg
u_CK = 10 #J/kg
m_w = 0.13810 #kg
u_mw = 0.000058 #kg
m_F = 0.19800 #kg
u_mF = 0.000029 #kg
T_A = 323.15 #K
u_TA = 0.029 #K
T_B = 293.15 #K
u_TB = 0.029 #K
T_M = 317.35 #K
u_TM = 0.029 #K
c_w = 4180 #J
sqrt( ( ((1+m_w*c_w)*(T_M-T_B))/(m_F*(T_A-T_B))*u_CK)**2
+( ((C_K+c_w)*(T_M-T_B))/(m_F*(T_A-T_M))*u_mw)**2
+( ((C_K+m_w*c_w)*(1-T_B))/(m_F*(T_A-1))*u_TM)**2
+( ((C_K+m_w*c_w)*(T_M-1))/(m_F*(T_A-T_M))*u_TB)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(T_A-T_M)*u_mF)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(m_F*(1-T_M))*u_TA)**2)
# Berechnung in R
((((1+0.13810*4180)*(317.35-293.150))/(0.19800*(323.15-293.150))*10)**2
+(((80+4180)*(317.35-293.150))/(0.19800*(323.15-317.35))*0.000058)**2
+(((80+0.13810*4180)*(1-293.150))/(0.19800*(323.15-1))*0.029)**2
+(((80+0.13810* 4180)*(317.35-1))/(0.19800*(323.15-317.35))*0.029)**2
+(((80+0.13810* 4180)*(317.35-293.150))/(323.15-317.35)*0.000029)**2
+(((80+0.13810*4180)*(317.35-293.150))/(0.19800*(1-317.35))*0.029)**2)**0.5
# Konstanten
C_K = 80 #J/kg
u_CK = 10 #J/kg
u_mw = 0.000058 #kg
u_mF = 0.000029 #kg
u_TA = 0.029 #K
u_TB = 0.029 #K
u_TM = 0.029 #K
c_w = 4180 #J
# Variablen
m_w = 0.13810 #kg
m_F = 0.19800 #kg
T_A = 323.15 #K
T_B = 293.15 #K
T_M = 317.35 #K
# Berechnung in R
sqrt( ( ((1+m_w*c_w)*(T_M-T_B))/(m_F*(T_A-T_B))*u_CK)**2
+( ((C_K+c_w)*(T_M-T_B))/(m_F*(T_A-T_M))*u_mw)**2
+( ((C_K+m_w*c_w)*(1-T_B))/(m_F*(T_A-1))*u_TM)**2
+( ((C_K+m_w*c_w)*(T_M-1))/(m_F*(T_A-T_M))*u_TB)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(T_A-T_M)*u_mF)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(m_F*(1-T_M))*u_TA)**2)
# Neudefinition Variablen
m_w = 0.14390 #kg
m_F = 0.17612 #kg
T_A = 322.25 #K
T_B = 293.15 #K
T_M = 315.95 #K
# Berechnung in R
sqrt( ( ((1+m_w*c_w)*(T_M-T_B))/(m_F*(T_A-T_B))*u_CK)**2
+( ((C_K+c_w)*(T_M-T_B))/(m_F*(T_A-T_M))*u_mw)**2
+( ((C_K+m_w*c_w)*(1-T_B))/(m_F*(T_A-1))*u_TM)**2
+( ((C_K+m_w*c_w)*(T_M-1))/(m_F*(T_A-T_M))*u_TB)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(T_A-T_M)*u_mF)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(m_F*(1-T_M))*u_TA)**2)
# Konstanten
C_K = 80 #J/kg
u_CK = 10 #J/kg
u_mw = 0.000058 #kg
u_mF = 0.000029 #kg
u_TA = 0.029 #K
u_TB = 0.029 #K
u_TM = 0.029 #K
c_w = 4180 #J
# Variablen
m_w = 0.13810 #kg
m_F = 0.19800 #kg
T_A = 323.15 #K
T_B = 293.15 #K
T_M = 317.35 #K
# Berechnung in R
sqrt( ( ((1+m_w*c_w)*(T_M-T_B))/(m_F*(T_A-T_B))*u_CK)**2
+( ((C_K+c_w)*(T_M-T_B))/(m_F*(T_A-T_M))*u_mw)**2
+( ((C_K+m_w*c_w)*(1-T_B))/(m_F*(T_A-1))*u_TM)**2
+( ((C_K+m_w*c_w)*(T_M-1))/(m_F*(T_A-T_M))*u_TB)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(T_A-T_M)*u_mF)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(m_F*(1-T_M))*u_TA)**2)
# Berechnung in R
sqrt( ( ((1+m_w*c_w)*(T_M-T_B))/(m_F*(T_A-T_B))*u_CK)**2
+( ((C_K+c_w)*(T_M-T_B))/(m_F*(T_A-T_M))*u_mw)**2
+( ((C_K+m_w*c_w)*(1-T_B))/(m_F*(T_A-1))*u_TM)**2
+( ((C_K+m_w*c_w)*(T_M-1))/(m_F*(T_A-T_M))*u_TB)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(T_A-T_M)*u_mF)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(m_F*(1-T_M))*u_TA)**2)
# Berechnung in R
sqrt( ( ((1+m_w*c_w)*(T_M-T_B))/(m_F*(T_A-T_B))*u_CK)**2
+( ((C_K+c_w)*(T_M-T_B))/(m_F*(T_A-T_M))*u_mw)**2
+( ((C_K+m_w*c_w)*(1-T_B))/(m_F*(T_A-1))*u_TM)**2
+( ((C_K+m_w*c_w)*(T_M-1))/(m_F*(T_A-T_M))*u_TB)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(T_A-T_M)*u_mF)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(m_F*(1-T_M))*u_TA)**2)
```
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# Einlesen der csv-Datei
zeitreiheErhitzung <- read.csv("Daten/Messreihe.csv", sep = ";", dec=",")
# Tidy-up
zeitreiheErhitzung <- zeitreiheErhitzung[2:nrow(zeitreiheErhitzung), 10:11]
colnames(zeitreiheErhitzung) <- c("Zeit_s", "Temperatur")
# Lineare Regression
lm <- lm(zeitreiheErhitzung$Temperatur~zeitreiheErhitzung$Zeit_s)
# Steigung a extrahieren
a <- lm$coefficient[2]
# Y-Achsenabschnitt b extrahieren
b <- lm$coefficient[1]
# Standardfehler R^2 extrahieren
lmsummary <- summary(lm)
R <- lmsummary$coefficients[2,2]
# Ausgabe als Plot
{plot(x=zeitreiheErhitzung$Zeit_s, y=zeitreiheErhitzung$Temperatur,
# Aesthetics
ylab = "Temperatur T in °C",
xlab = "Zeit t in s",
main= "Temperaturverlauf im Kaloriemeter",
pch=20, las=1)
# Einzeichnen der Regressionsgeraden
abline(coef=c(b, a))
# Einzeichen der Regressiosgeraden ab-/zuzüglich des Fehlers
abline(coef=c(b, a-R))
abline(coef=c(b, a+R))
# Legendenerzeugung
legend(x=270, y=(0.98*max(zeitreiheErhitzung$Temperatur)),
legend=c("Messwerte", paste("Lineare Regression:",
"\ny=ax+b",
"\na = ", round(a,5),
"\nb = ", round(b,3),
"\nR^2 = ", round(R, 5))),
col="black", pch = c(20, 26), lty=c(0,1),
bty = "n")
}
# Lineare Regression
lm <- lm(zeitreiheErhitzung$Temperatur~zeitreiheErhitzung$Zeit_s)
summary(lm)
# Berechnung in R
(5.7*2.2)/(0.01641)-4180*0.1637
# Berechnung in R
sqrt((2.20/0.01641*0.0029)**2+(5.70/0.01641*0.0029)**2+
(5.70*2.20/0.01641**2*0.00022)**2+(4180*29*10**(-6))**2)
# Messgrößen
groesse = c("C Kaloriemeter [J/K]", "Becherglas mit Wasser [g]", "Masse Becherglas [g]", "Wassermasse [g]", "Metallmasse [g]", "Metallvolumen [ml]", "Anfangstemperatur [°C]", "Mischtemperatur [°C]", "Raumtemperatur [K]")
messwerte <- data.frame(Messwert = c(80, 235.5, 97.4, 235.5-97.4, 198.0, 23.00, 273.15+50.000, 273.15+44.2, 273.15+20),
Formelzeichen = c("C_K", "-", "-", "m_w", "m_F", "V_F", "T_A", "T_M", "T_B"),
Geräteart = c("-", "digital", "digital", "-", "digital", "analog", "digital", "digital", "digital"),
Skaleneinheit = c("-", 0.1, 0.1, "-", 0.1, 1, 0.1, 0.1, 0.1),
Unsicherheit = c(10, 0.029, 0.029, 2*0.029, 0.029, 0.20, 0.029, 0.029, 0.029)
)
rownames(messwerte) <- groesse
knitr::kable(messwerte, caption = "Aufgenommene Messwerte samt Unsicherheiten für das untersuchte orangene Metall")
# Messgrößen
groesse = c("C Kaloriemeter [J/K]", "Becherglas mit Wasser [g]", "Masse Becherglas [g]", "Wassermasse [g]", "Metallmasse [g]", "Metallvolumen [ml]", "Anfangstemperatur []", "Mischtemperatur [K]", "Raumtemperatur [K]")
messwerte <- data.frame(Messwert = c(80, 241.3, 97.4, 241.3-97.4, 176.12,22.00, 273.150+49.100, 273.150+42.8, 273.15+20.0),
Formelzeichen = c("C_K", "-", "-", "m_w", "m_F", "V_F", "T_A", "T_M", "T_B"),
Geräteart = c("-", "digital", "digital", "-", "digital", "analog", "digital", "digital", "digital"),
Skaleneinheit = c("-", 0.1, 0.1, "-", 0.1, 1, 0.1, 0.1, 0.1),
Unsicherheit = c(10, 0.029, 0.029, 2*0.029, 0.029, 0.20, 0.029, 0.029, 0.029)
)
rownames(messwerte) <- groesse
knitr::kable(messwerte, caption = "Aufgenommene Messwerte samt Unsicherheiten für das untersuchte graue Metall")
# Konstanten
C_K = 80 #J/kg
u_CK = 10 #J/kg
u_mw = 0.000058 #kg
u_mF = 0.000029 #kg
u_TA = 0.029 #K
u_TB = 0.029 #K
u_TM = 0.029 #K
c_w = 4180 #J
# Variablen
m_w = 0.13810 #kg
m_F = 0.19800 #kg
T_A = 323.15 #K
T_B = 293.15 #K
T_M = 317.35 #K
# Berechnung in R
sqrt( ( ((1+m_w*c_w)*(T_M-T_B))/(m_F*(T_A-T_B))*u_CK)**2
+( ((C_K+c_w)*(T_M-T_B))/(m_F*(T_A-T_M))*u_mw)**2
+( ((C_K+m_w*c_w)*(1-T_B))/(m_F*(T_A-1))*u_TM)**2
+( ((C_K+m_w*c_w)*(T_M-1))/(m_F*(T_A-T_M))*u_TB)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(T_A-T_M)*u_mF)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(m_F*(1-T_M))*u_TA)**2)
# Neudefinition Variablen
m_w = 0.14390 #kg
m_F = 0.17612 #kg
T_A = 322.25 #K
T_B = 293.15 #K
T_M = 315.95 #K
# Berechnung in R
sqrt( ( ((1+m_w*c_w)*(T_M-T_B))/(m_F*(T_A-T_B))*u_CK)**2
+( ((C_K+c_w)*(T_M-T_B))/(m_F*(T_A-T_M))*u_mw)**2
+( ((C_K+m_w*c_w)*(1-T_B))/(m_F*(T_A-1))*u_TM)**2
+( ((C_K+m_w*c_w)*(T_M-1))/(m_F*(T_A-T_M))*u_TB)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(T_A-T_M)*u_mF)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(m_F*(1-T_M))*u_TA)**2)
# Variablen
m_w = 0.13810 #kg
m_F = 0.19800 #kg
T_A = 323.15 #K
T_B = 293.15 #K
T_M = 317.35 #K
# Berechnung in R
sqrt( ( ((1+m_w*c_w)*(T_M-T_B))/(m_F*(T_A-T_B))*u_CK)**2
+( ((C_K+c_w)*(T_M-T_B))/(m_F*(T_A-T_M))*u_mw)**2
+( ((C_K+m_w*c_w)*(1-T_B))/(m_F*(T_A-1))*u_TM)**2
+( ((C_K+m_w*c_w)*(T_M-1))/(m_F*(T_A-T_M))*u_TB)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(T_A-T_M)*u_mF)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(m_F*(1-T_M))*u_TA)**2)
# Neudefinition Variablen
m_w = 0.14390 #kg
m_F = 0.17612 #kg
T_A = 322.25 #K
T_B = 293.15 #K
T_M = 315.95 #K
# Berechnung in R
sqrt( ( ((1+m_w*c_w)*(T_M-T_B))/(m_F*(T_A-T_B))*u_CK)**2
+( ((C_K+c_w)*(T_M-T_B))/(m_F*(T_A-T_M))*u_mw)**2
+( ((C_K+m_w*c_w)*(1-T_B))/(m_F*(T_A-1))*u_TM)**2
+( ((C_K+m_w*c_w)*(T_M-1))/(m_F*(T_A-T_M))*u_TB)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(T_A-T_M)*u_mF)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(m_F*(1-T_M))*u_TA)**2)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# Berechnung in R
((80+0.1381*4180)(317.35-297.15))/(0.1980\cdot (323.15-317.35))
# Berechnung in R
((80+0.1381*4180)(317.35-297.15))/(0.1980*(323.15-317.35))
# Berechnung in R
((80+0.1381*4180)*(317.35-297.15))/(0.1980*(323.15-317.35))
```{r}
# Konstanten
C_K = 80 #J/kg
u_mw = 0.000058 #kg
u_mF = 0.000029 #kg
u_TB = 0.029 #K
u_TM = 0.029 #K
# Variablen
m_w = 0.13810 #kg
m_F = 0.19800 #kg
T_A = 323.15 #K
T_B = 293.15 #K
T_M = 317.35 #K
# Berechnung in R
sqrt( ( ((1+m_w*c_w)*(T_M-T_B))/(m_F*(T_A-T_B))*u_CK)**2
+( ((C_K+c_w)*(T_M-T_B))/(m_F*(T_A-T_M))*u_mw)**2
+( ((C_K+m_w*c_w)*(1-T_B))/(m_F*(T_A-1))*u_TM)**2
+( ((C_K+m_w*c_w)*(T_M-1))/(m_F*(T_A-T_M))*u_TB)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(T_A-T_M)*u_mF)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(m_F*(1-T_M))*u_TA)**2)
c_w = 4180 #J
# Variablen
m_w = 0.13810 #kg
m_F = 0.19800 #kg
T_A = 323.15 #K
T_B = 293.15 #K
T_M = 317.35 #K
# Berechnung in R
sqrt( ( ((1+m_w*c_w)*(T_M-T_B))/(m_F*(T_A-T_B))*u_CK)**2
+( ((C_K+c_w)*(T_M-T_B))/(m_F*(T_A-T_M))*u_mw)**2
+( ((C_K+m_w*c_w)*(1-T_B))/(m_F*(T_A-1))*u_TM)**2
+( ((C_K+m_w*c_w)*(T_M-1))/(m_F*(T_A-T_M))*u_TB)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(T_A-T_M)*u_mF)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(m_F*(1-T_M))*u_TA)**2)
# Konstanten
C_K = 80 #J/kg
u_CK = 10 #J/kg
u_mw = 0.000058 #kg
u_mF = 0.000029 #kg
u_TA = 0.029 #K
u_TB = 0.029 #K
u_TM = 0.029 #K
c_w = 4180 #J
# Variablen
m_w = 0.13810 #kg
m_F = 0.19800 #kg
T_A = 323.15 #K
T_B = 293.15 #K
T_M = 317.35 #K
# Berechnung in R
sqrt( ( ((1+m_w*c_w)*(T_M-T_B))/(m_F*(T_A-T_B))*u_CK)**2
+( ((C_K+c_w)*(T_M-T_B))/(m_F*(T_A-T_M))*u_mw)**2
+( ((C_K+m_w*c_w)*(1-T_B))/(m_F*(T_A-1))*u_TM)**2
+( ((C_K+m_w*c_w)*(T_M-1))/(m_F*(T_A-T_M))*u_TB)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(T_A-T_M)*u_mF)**2
+( ((C_K+m_w*c_w)*(T_M-T_B))/(m_F*(1-T_M))*u_TA)**2)
# Berechnung in R
((80+0.1439*4180)*(315.95-293.15))/(0.17612*(322.25-315.95))
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
((0.080.1381*4.180)*(317.35-293.15))/(0.1980*(323.15-317.35))
((0.080+1381*4.180)*(317.35-293.15))/(0.1980*(323.15-317.35))
((0.08+1381*4.180)*(317.35-293.15))/(0.1980*(323.15-317.35))
# Berechnung in R
((80+0.1381*4180)*(317.35-293.15))/(0.1980*(323.15-317.35))
((0.08+1381*4.180)*(317.35-293.15))/(0.1980*(323.15-317.35))
((0.08+0.1381*4.180)*(317.35-293.15))/(0.1980*(323.15-317.35))
((80+0.1381*4180)*(323.15-317.35))/(0.1980*(317.35-293.15))
((80+0.1439*4180)*(322.25-315.95))/(0.17612*(315.95-293.15))
# Berechnung in R
((80+0.1439*4180)*(315.95-293.15))/(0.17612*(322.25-315.95))
((80+0.1439*4180)*(322.25-315.95))/(0.17612*(315.95-293.15))
