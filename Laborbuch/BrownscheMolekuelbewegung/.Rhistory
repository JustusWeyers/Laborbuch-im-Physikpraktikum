}
### Berechnung der Schrittweite der einzelnen random-walks
# Teilchen2
spalten = 2
distances = c()
for (col in spalten){
walk = calculateDistance1D(x_meter[, col])
distances = append(distances, walk)
}
T2 <- distances
mean2 <- mean(distances)
sd2 <- sd(distances)
### Plotten
nbreaks = 15
# Funktion zum plotten der Histogramme
histogram <- function(vektor, title){
h <- hist(vektor, breaks=nbreaks, main=title,
xlab="Weite eines Random-walks [m]",
ylab = "Häufigleit")
x2 <- seq(min(vektor), max(vektor), length = 40)
fun <- dnorm(x2, mean = mean(vektor), sd = sd(vektor))
fun <- fun * diff(h$mids[1:2]) * length(vektor)
lines(x2, fun, lwd = 2)
legend("topright",
legend=c(paste("Mittelwert: ", round(mean(vektor),9)),
paste("Standardabweichung: ", round(sd(vektor), 9)))
)
}
# Ausgabe
histogram(T2, "Histogramm der Random-Walk-Schrittweite von Teilchen 2")
### Einlesen des Schrittweiten dataframes
x_meter <- read.csv('Tabellen/x_meter.csv')
### Funktion zur Berechnung der Schrittweiten, spaltenweise
calculateDistance1D = function(vector){
shift_vector = c(0, vector[1:(length(vector)-1)])
dist = vector-shift_vector
dist[1] = 0
return(dist)
}
### Berechnung der Schrittweite der einzelnen random-walks
# Teilchen2
spalten = 2
distances = c()
for (col in spalten){
walk = calculateDistance1D(x_meter[, col])
distances = append(distances, walk)
}
T2 <- distances
mean2 <- mean(distances)
sd2 <- sd(distances)
### Plotten
nbreaks = 15
# Funktion zum plotten der Histogramme
histogram <- function(vektor, title){
h <- hist(vektor, breaks=nbreaks, main=title,
xlab="Weite eines Random-walks [m]",
ylab = "Häufigleit")
x2 <- seq(min(vektor), max(vektor), length = 40)
fun <- dnorm(x2, mean = mean(vektor), sd = sd(vektor))
fun <- fun * diff(h$mids[1:2]) * length(vektor)
lines(x2, fun, lwd = 2)
legend("topright",
legend=c(paste("Mittelwert: ", round(mean(vektor),9)),
paste("Standardabweichung: ", round(sd(vektor), 9)))
)
}
# Ausgabe
histogram(T2, "Histogramm der Random-Walk-Schrittweite in x-Richtung von Teilchen 2")
x_meter <- read.csv('Daten/Tabellen/x_meter.csv')
setwd("C:/Users/justu/Desktop/Laborbuch-im-Physikpraktikum/Laborbuch/BrownscheMolekuelbewegung")
x_meter <- read.csv('Daten/Tabellen/x_meter.csv')
x_meter <- read.csv('code/Tabellen/x_meter.csv')
calculateDistance1D(x_meter$X.1)
d1 <- calculateDistance1D(x_meter$X.1)
shapiro.test(RWS)
# Berechnung der RWS von Teilchen 2
RWS <- calculateDistance1D(x_meter$X.2)
shapiro.test(RWS)
sd(RWS)
# Fehler der Standardabweichung
sd(RWS)/100
D = sd(RWS)^2/(2*1)
sd(RWS)^2/(2*1)
# Berechnung der Unsicherheit der Diffusionskonstanten für Teilchen 2
u_D = sqrt( (2*sigma/2*u_sigma)**2 + (sigma**2/2*1**2*0)**2 )
# Standardabweichung x-Verschiebung von Teilchen 2
sigma = sd(RWS) #m
sigma
# Standardabweichung x-Verschiebung von Teilchen 2
sigma = sd(RWS) #m
sigma
Nun kann die Standardabweichung aus den Werten der RWS-Serie berechnet werden.
```{r}
# Standardabweichung x-Verschiebung von Teilchen 2
sigma = sd(RWS) #m
sigma
```
Der Fehler der Standardabweichung berechnet sich als Quotient aus Standardabweichung und der Anzahl von Messwerten ($n=100$).
```{r}
# Fehler der Standardabweichung
u_sigma = sd(RWS)/100 #m
u_sigma
```
Unter der Annahme, dass die Bewegung hinreichend lange beobachtet wurde beträgt die mittlere Verschiebung $\sigma$, bzw. Schrittweite $\delta$ bzw. Standardabweichung der Verschiebung $\Delta x$: $\sigma = (6.185 \pm 0.062 )\cdot 10^{-7}m = (0.6185 \pm 0.0062 )\mu m$.
Nun kann die Diffusionskonstante berechnet werden (in $\frac{m^2}{s}$):
```{r}
# Berechnung der Diffusionskonstanten für Teilchen 2
D = sd(RWS)^2/(2*1)
```
Auch die Unsicherheit der Diffusionskonstante kann berechnet werden.
Da über die Unsicherheit der vom Computer bestimmten Zeitintervalle nichts weiter bekannt ist wird $u_t$ als null angenommen.
$$u_D = \sqrt{(\frac{\partial D}{\partial \sigma}\cdot u_{\sigma})^2 + \frac{\partial D}{\partial t}\cdot u_{t})^2}= \sqrt{(\frac{2\sigma}{2t}\cdot u_{\sigma})^2+(\frac{\sigma^2}{2t^2}\cdot u_t)^2}$$
```{r}
# Berechnung der Unsicherheit der Diffusionskonstanten für Teilchen 2
u_D = sqrt( (2*sigma/2*u_sigma)**2 + (sigma**2/2*1**2*0)**2 )
```
# Standardabweichung x-Verschiebung von Teilchen 2
sigma = sd(RWS) #m
sigma
# Fehler der Standardabweichung
u_sigma = sd(RWS)/100 #m
u_sigma
# Berechnung der Diffusionskonstanten für Teilchen 2
D = sd(RWS)^2/(2*1)
# Berechnung der Unsicherheit der Diffusionskonstanten für Teilchen 2
u_D = sqrt( (2*sigma/2*u_sigma)**2 + (sigma**2/2*1**2*0)**2 )
u_D
D
eta = 1e-6
(D*6*pi*eta*r)/(21.7+297.3)
eta = 1e-6 # \frac{m^2}{s}
r = 2e-6 # m
(D*6*pi*eta*r)/(21.7+297.3)
eta = 1e-6 # \frac{m^2}{s}
r = 2e-6 # m
(D*6*pi*eta*r)/(21.7+273,15)
(D*6*pi*eta*r)/(21.7+273.15)
# Berechnung der RWS von Teilchen 2
RWS <- calculateDistance1D(x_meter$X.2)
RWS
# Einlesen der x-Positionen aller Teilchen aus dem erhobenen Datensatz
x_meter <- read.csv('code/Tabellen/x_meter.csv')
### Funktion zur Berechnung der RWS
calculateDistance1D = function(vector){
shift_vector = c(0, vector[1:(length(vector)-1)])
dist = vector-shift_vector
dist[1] = 0
return(dist)
}
# Berechnung der RWS von Teilchen 2
RWS <- calculateDistance1D(x_meter$X.2)
RWS
# Berechnung der RWS von Teilchen 2
RWS <- calculateDistance1D(x_meter$X.8)
RWS
shapiro.test(RWS)
# Standardabweichung x-Verschiebung von Teilchen 2
sigma = sd(RWS) #m
sigma
# Berechnung der Diffusionskonstanten für Teilchen 2
D = sd(RWS)^2/(2*1)
D
# Berechnung der Unsicherheit der Diffusionskonstanten für Teilchen 2
u_D = sqrt( (2*sigma/2*u_sigma)**2 + (sigma**2/2*1**2*0)**2 )
u_D
eta = 1e-6 # m^2/s
r = 2e-6 # m
(D*6*pi*eta*r)/(21.7+273.15)
# Berechnung der RWS von Teilchen 2
RWS <- calculateDistance1D(x_meter$X.1)
# Berechnung der RWS von Teilchen 2
RWS <- calculateDistance1D(x_meter$X.1)
shapiro.test(RWS)
# Standardabweichung x-Verschiebung von Teilchen 2
sigma = sd(RWS) #m
sigma
# Fehler der Standardabweichung
u_sigma = sd(RWS)/100 #m
u_sigma
# Berechnung der Diffusionskonstanten für Teilchen 2
D = sd(RWS)^2/(2*1)
D
# Berechnung der Unsicherheit der Diffusionskonstanten für Teilchen 2
u_D = sqrt( (2*sigma/2*u_sigma)**2 + (sigma**2/2*1**2*0)**2 )
u_D
eta = 1e-6 # m^2/s
r = 2e-6 # m
(D*6*pi*eta*r)/(21.7+273.15)
# Berechnung der Kantenlänge eines Pixels
2*10**(-6)/16
# Berechnung Unsicherheit der Kantenlänge:
2*10**(-6)/(16*2*sqrt(6))
# Einlesen der x-Positionen aller Teilchen aus dem erhobenen Datensatz
x_meter <- read.csv('code/Tabellen/x_meter.csv')
### Funktion zur Berechnung der RWS
calculateDistance1D = function(vector){
shift_vector = c(0, vector[1:(length(vector)-1)])
dist = vector-shift_vector
dist[1] = 0
return(dist)
}
# Berechnung der RWS von Teilchen 2
RWS <- calculateDistance1D(x_meter$X.1)
shapiro.test(RWS)
# Standardabweichung x-Verschiebung von Teilchen 2
sigma = sd(RWS) #m
sigma
# Fehler der Standardabweichung
u_sigma = sd(RWS)/100 #m
u_sigma
# Berechnung der Diffusionskonstanten für Teilchen 2
D = sd(RWS)^2/(2*1)
D
# Berechnung der Unsicherheit der Diffusionskonstanten für Teilchen 2
u_D = sqrt( (2*sigma/2*u_sigma)**2 + (sigma**2/2*1**2*0)**2 )
u_D
eta = 1e-6 # m^2/s
r = 2e-6 # m
(D*6*pi*eta*r)/(21.7+273.15)
# Berechnung der Kantenlänge eines Pixels
2*10**(-6)/16
# Berechnung Unsicherheit der Kantenlänge:
2*10**(-6)/(16*2*sqrt(6))
# Einlesen der x-Positionen aller Teilchen aus dem erhobenen Datensatz
x_meter <- read.csv('code/Tabellen/x_meter.csv')
### Funktion zur Berechnung der RWS
calculateDistance1D = function(vector){
shift_vector = c(0, vector[1:(length(vector)-1)])
dist = vector-shift_vector
dist[1] = 0
return(dist)
}
# Berechnung der RWS von Teilchen 2
RWS <- calculateDistance1D(x_meter$X.1)
shapiro.test(RWS)
# Standardabweichung x-Verschiebung von Teilchen 2
sigma = sd(RWS) #m
sigma
# Fehler der Standardabweichung
u_sigma = sd(RWS)/100 #m
u_sigma
# Berechnung der Diffusionskonstanten für Teilchen 2
D = sd(RWS)^2/(2*1)
D
# Berechnung der Unsicherheit der Diffusionskonstanten für Teilchen 2
u_D = sqrt( (2*sigma/2*u_sigma)**2 + (sigma**2/2*1**2*0)**2 )
u_D
eta = 1e-6 # m^2/s
r = 2e-6 # m
(D*6*pi*eta*r)/(21.7+273.15)
# Berechnung der Kantenlänge eines Pixels
2*10**(-6)/16
# Berechnung Unsicherheit der Kantenlänge:
2*10**(-6)/(16*2*sqrt(6))
# Einlesen der x-Positionen aller Teilchen aus dem erhobenen Datensatz
x_meter <- read.csv('code/Tabellen/x_meter.csv')
### Funktion zur Berechnung der RWS
calculateDistance1D = function(vector){
shift_vector = c(0, vector[1:(length(vector)-1)])
dist = vector-shift_vector
dist[1] = 0
return(dist)
}
# Berechnung der RWS von Teilchen 2
RWS <- calculateDistance1D(x_meter$X.2)
shapiro.test(RWS)
# Standardabweichung x-Verschiebung von Teilchen 2
sigma = sd(RWS) #m
sigma
# Fehler der Standardabweichung
u_sigma = sd(RWS)/100 #m
u_sigma
# Berechnung der Diffusionskonstanten für Teilchen 2
D = sd(RWS)^2/(2*1)
D
# Berechnung der Unsicherheit der Diffusionskonstanten für Teilchen 2
u_D = sqrt( (2*sigma/2*u_sigma)**2 + (sigma**2/2*1**2*0)**2 )
u_D
eta = 1e-6 # m^2/s
r = 2e-6 # m
(D*6*pi*eta*r)/(21.7+273.15)
# Berechnung der Kantenlänge eines Pixels
2*10**(-6)/16
# Berechnung Unsicherheit der Kantenlänge:
2*10**(-6)/(16*2*sqrt(6))
# Einlesen der x-Positionen aller Teilchen aus dem erhobenen Datensatz
x_meter <- read.csv('code/Tabellen/x_meter.csv')
### Funktion zur Berechnung der RWS
calculateDistance1D = function(vector){
shift_vector = c(0, vector[1:(length(vector)-1)])
dist = vector-shift_vector
dist[1] = 0
return(dist)
}
# Berechnung der RWS von Teilchen 2
RWS <- calculateDistance1D(x_meter$X.8)
shapiro.test(RWS)
# Standardabweichung x-Verschiebung von Teilchen 2
sigma = sd(RWS) #m
sigma
# Fehler der Standardabweichung
u_sigma = sd(RWS)/100 #m
u_sigma
# Berechnung der Diffusionskonstanten für Teilchen 2
D = sd(RWS)^2/(2*1)
D
# Berechnung der Unsicherheit der Diffusionskonstanten für Teilchen 2
u_D = sqrt( (2*sigma/2*u_sigma)**2 + (sigma**2/2*1**2*0)**2 )
u_D
eta = 1e-6 # m^2/s
r = 2e-6 # m
(D*6*pi*eta*r)/(21.7+273.15)
# Berechnung der Kantenlänge eines Pixels
2*10**(-6)/16
# Berechnung Unsicherheit der Kantenlänge:
2*10**(-6)/(16*2*sqrt(6))
# Einlesen der x-Positionen aller Teilchen aus dem erhobenen Datensatz
x_meter <- read.csv('code/Tabellen/x_meter.csv')
### Funktion zur Berechnung der RWS
calculateDistance1D = function(vector){
shift_vector = c(0, vector[1:(length(vector)-1)])
dist = vector-shift_vector
dist[1] = 0
return(dist)
}
# Berechnung der RWS von Teilchen 2
RWS <- calculateDistance1D(x_meter$X.2)
shapiro.test(RWS)
# Standardabweichung x-Verschiebung von Teilchen 2
sigma = sd(RWS) #m
sigma
# Fehler der Standardabweichung
u_sigma = sd(RWS)/100 #m
u_sigma
# Berechnung der Diffusionskonstanten für Teilchen 2
D = sd(RWS)^2/(2*1)
D
# Berechnung der Unsicherheit der Diffusionskonstanten für Teilchen 2
u_D = sqrt( (2*sigma/2*u_sigma)**2 + (sigma**2/2*1**2*0)**2 )
u_D
eta = 1e-6 # m^2/s
r = 2e-6 # m
(D*6*pi*eta*r)/(21.7+273.15)
(D*6*pi*eta*r)/(21.7+0)
(D*6*pi*eta*r)/(21.7)
eta = 1e-6 # m^2/s
r = 1e-6 # m
(D*6*pi*eta*r)/(21.7)
kB = (D*6*pi*eta*r)/(Temp)
kB
r = 1e-6 # m
Temp = 21.7
kB = (D*6*pi*eta*r)/(Temp)
kB
u_T = 0.020
sqrt(((6*pi*eta*r)/(Temp)*u_D)**2+((D*6*pi*eta*r)/(Temp**2)*u_T)^2)
Temp = 21.7 + 273.15
kB = (D*6*pi*eta*r)/(Temp)
kB
eta = 1002e-6 # m^2/s
r = 1e-6 # m
Temp = 21.7 + 273.15
kB = (D*6*pi*eta*r)/(Temp)
kB
kB
eta = 1002e-6 # m^2/s
r = 1e-6 # m
Temp = 21.7 + 273.15
kB = (D*6*pi*eta*r)/(Temp)
kB
u_T = 0.020
sqrt(((6*pi*eta*r)/(Temp)*u_D)**2+((D*6*pi*eta*r)/(Temp**2)*u_T)^2)
# Berechnung der Kantenlänge eines Pixels
2*10**(-6)/16
# Berechnung Unsicherheit der Kantenlänge:
2*10**(-6)/(16*2*sqrt(6))
# Einlesen der x-Positionen aller Teilchen aus dem erhobenen Datensatz
x_meter <- read.csv('code/Tabellen/x_meter.csv')
### Funktion zur Berechnung der RWS
calculateDistance1D = function(vector){
shift_vector = c(0, vector[1:(length(vector)-1)])
dist = vector-shift_vector
dist[1] = 0
return(dist)
}
# Berechnung der RWS von Teilchen 2
RWS <- calculateDistance1D(x_meter$X.8)
shapiro.test(RWS)
# Standardabweichung x-Verschiebung von Teilchen 2
sigma = sd(RWS) #m
sigma
# Fehler der Standardabweichung
u_sigma = sd(RWS)/100 #m
u_sigma
# Berechnung der Diffusionskonstanten für Teilchen 2
D = sd(RWS)^2/(2*1)
D
# Berechnung der Unsicherheit der Diffusionskonstanten für Teilchen 2
u_D = sqrt( (2*sigma/2*u_sigma)**2 + (sigma**2/2*1**2*0)**2 )
u_D
eta = 1002e-6 # m^2/s
r = 1e-6 # m
Temp = 21.7 + 273.15
kB = (D*6*pi*eta*r)/(Temp)
kB
u_T = 0.020
sqrt(((6*pi*eta*r)/(Temp)*u_D)**2+((D*6*pi*eta*r)/(Temp**2)*u_T)^2)
# Berechnung der Kantenlänge eines Pixels
2*10**(-6)/16
# Berechnung Unsicherheit der Kantenlänge:
2*10**(-6)/(16*2*sqrt(6))
# Einlesen der x-Positionen aller Teilchen aus dem erhobenen Datensatz
x_meter <- read.csv('code/Tabellen/x_meter.csv')
### Funktion zur Berechnung der RWS
calculateDistance1D = function(vector){
shift_vector = c(0, vector[1:(length(vector)-1)])
dist = vector-shift_vector
dist[1] = 0
return(dist)
}
# Berechnung der RWS von Teilchen 2
RWS <- calculateDistance1D(x_meter$X.2)
shapiro.test(RWS)
# Standardabweichung x-Verschiebung von Teilchen 2
sigma = sd(RWS) #m
sigma
# Fehler der Standardabweichung
u_sigma = sd(RWS)/100 #m
u_sigma
# Berechnung der Diffusionskonstanten für Teilchen 2
D = sd(RWS)^2/(2*1)
D
# Berechnung der Unsicherheit der Diffusionskonstanten für Teilchen 2
u_D = sqrt( (2*sigma/2*u_sigma)**2 + (sigma**2/2*1**2*0)**2 )
u_D
eta = 1002e-6 # m^2/s
r = 1e-6 # m
Temp = 21.7 + 273.15
kB = (D*6*pi*eta*r)/(Temp)
kB
u_T = 0.020
sqrt(((6*pi*eta*r)/(Temp)*u_D)**2+((D*6*pi*eta*r)/(Temp**2)*u_T)^2)
# Berechnung der Kantenlänge eines Pixels
2*10**(-6)/16
# Berechnung Unsicherheit der Kantenlänge:
2*10**(-6)/(16*2*sqrt(6))
# Einlesen der x-Positionen aller Teilchen aus dem erhobenen Datensatz
x_meter <- read.csv('code/Tabellen/x_meter.csv')
### Funktion zur Berechnung der RWS
calculateDistance1D = function(vector){
shift_vector = c(0, vector[1:(length(vector)-1)])
dist = vector-shift_vector
dist[1] = 0
return(dist)
}
# Berechnung der RWS von Teilchen 2
RWS <- calculateDistance1D(x_meter$X.8)
shapiro.test(RWS)
# Standardabweichung x-Verschiebung von Teilchen 2
sigma = sd(RWS) #m
sigma
# Fehler der Standardabweichung
u_sigma = sd(RWS)/100 #m
u_sigma
# Berechnung der Diffusionskonstanten für Teilchen 2
D = sd(RWS)^2/(2*1)
D
# Berechnung der Unsicherheit der Diffusionskonstanten für Teilchen 2
u_D = sqrt( (2*sigma/2*u_sigma)**2 + (sigma**2/2*1**2*0)**2 )
u_D
eta = 1002e-6 # m^2/s
r = 1e-6 # m
Temp = 21.7 + 273.15
kB = (D*6*pi*eta*r)/(Temp)
kB
u_T = 0.020
sqrt(((6*pi*eta*r)/(Temp)*u_D)**2+((D*6*pi*eta*r)/(Temp**2)*u_T)^2)
# Berechnung der Kantenlänge eines Pixels
2*10**(-6)/16
# Berechnung Unsicherheit der Kantenlänge:
2*10**(-6)/(16*2*sqrt(6))
# Einlesen der x-Positionen aller Teilchen aus dem erhobenen Datensatz
x_meter <- read.csv('code/Tabellen/x_meter.csv')
### Funktion zur Berechnung der RWS
calculateDistance1D = function(vector){
shift_vector = c(0, vector[1:(length(vector)-1)])
dist = vector-shift_vector
dist[1] = 0
return(dist)
}
# Berechnung der RWS von Teilchen 2
RWS <- calculateDistance1D(x_meter$X.2)
shapiro.test(RWS)
# Standardabweichung x-Verschiebung von Teilchen 2
sigma = sd(RWS) #m
sigma
# Fehler der Standardabweichung
u_sigma = sd(RWS)/100 #m
u_sigma
# Berechnung der Diffusionskonstanten für Teilchen 2
D = sd(RWS)^2/(2*1)
D
# Berechnung der Unsicherheit der Diffusionskonstanten für Teilchen 2
u_D = sqrt( (2*sigma/2*u_sigma)**2 + (sigma**2/2*1**2*0)**2 )
u_D
eta = 1002e-6 # m^2/s
r = 1e-6 # m
Temp = 21.7 + 273.15
kB = (D*6*pi*eta*r)/(Temp)
kB
u_T = 0.020
sqrt(((6*pi*eta*r)/(Temp)*u_D)**2+((D*6*pi*eta*r)/(Temp**2)*u_T)^2)
